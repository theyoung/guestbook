version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:latest
    steps:
      - checkout
      - run:
          name: install php
          command: |
            sudo apt install php
            echo php -v
      - run:
          name: phplint env setup
          command: |
            sudo npm i -g phplint
      - run:
          name: check phplint
          command: |
            ./phplint.sh
      - run:
          name: success
          when: on_success
          command: |
            echo 'success php lint'
      - run:
          name: fail
          when: on_fail
          command: |
            echo 'php lint failed'
            exit 1;

  push-frontend:
    machine: true
    steps:
      - checkout
      - run: 
          name : login
          command: |
            echo "$DOCKER_PASS" | docker login --username $DOCKER_USER --password-stdin
      - run:
          name: docker image build
          command: |
            cd php-redis
            ./run_docker.sh
      - run:
          name: success
          when: on_success
          command: |
            echo 'image upload success'
      - run:
          name: fail
          when: on_fail
          command: |
            echo 'image upload fail'
            exit 1;

  setup-eks:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install dependencies
          command: |
            yum -y install tar gzip
      - run:
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp  
            mv /tmp/eksctl /usr/local/bin
      - run:
          name: check eks cluster existed
          command: |
            ./check-eks.sh
      - run:
          name: fail
          when: on_fail
          command: |
            echo 'eks setup failed'
  
  deploy-backend:
    docker:
      - image: amazon/aws-cli
    # environment:
    #   COLOR: blue
    steps:
      - checkout
      - run:
          name: check config and copy and paste
          command: |
            yum -y install tar gzip gettext
            curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.17.17/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
            kubectl version --client
            aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name EKS-cluster
      - run:
          name: redis master deployment
          command: |
            kubectl apply -f redis-master-deployment.yaml
      - run:
          name: redis master service
          command: |
            kubectl apply -f redis-master-service.yaml
      - run:
          name: redis slave deployment
          command: |
            kubectl apply -f redis-slave-deployment.yaml
      - run:
          name: redis slave service
          command: |
            kubectl apply -f redis-slave-service.yaml
      - run:
          name: green deploy and service change (blue/green)
          command: |
            ./check-env.sh
            cat color.val
      - run:
          name: service working check or rollback
          command: |
            externalUrl=$(kubectl describe service frontend | grep "LoadBalancer Ingress:" | awk '{print $3}')
            echo $externalUrl
            curl --request GET $externalUrl --max-time 3
      - run:
          name: fail and rollback
          when: on_fail
          command: |
            if [ -f color.val ]; then
                COLOR=$(cat color.val)
                if [[ $COLOR=="blue" ]];then
                      echo "$COLOR has been load failed => green rollback"
                      COLOR=green
                    else
                      echo "$COLOR has been load failed => blue rollback"
                      COLOR=blue
                fi
                envsubst < frontend-service.yaml | kubectl apply -f -
            else
                echo "No file, No need to rollback"    
            fi


workflows:
  default:
    jobs:
      - build-frontend: #checkout php, lint php
          filters:
            branches:
              only: [circleci-project-setup]
      - push-frontend: #image push
          requires: [build-frontend]
      - setup-eks: #eks setup
          requires: [push-frontend]
      - deploy-backend:
          requires: [setup-eks]